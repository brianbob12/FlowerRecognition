{
  "Name":"AdaINSetStyle",
  "Superclasses":[
    "BuildableNode"
  ],
  "Subclasses":[],
  "Description":"Normalizes input channels to specified means and standard deviations.",
  "Properties":[
    {
      "Name":"imported",
      "Type":"bool",
      "Description":"Weather this node has been imported or not"
    },
    {
      "Name":"numberOfChannels",
      "Type":"int",
      "Description":"Number of channels of 2 dimensional images per iteration"
    }
  ],
  "Functions":[
    {
      "Name":"__init__",
      "MandatoryArgs":[],
      "OptionalArgs":[
        {
          "Name":"name",
          "Type":"str",
          "Description":"Sets name property."
        },
        {
          "Name":"protected",
          "Type":"bool",
          "Description":"Option to block clear function."
        },
        {
          "Name":"ID",
          "Type":"int",
          "Description":"Sets ID property"
        }
      ],
      "Returns":[],
      "Throws":[],
      "Description":"Sets up key variables."
    },
    {
      "Name":"execute",
      "MandatoryArgs":[
        {
          "Name":"inputs",
          "Type":"List[tensorflow.Tensor]",
          "Description":"First connection has shape=[batchSize,numberOfChannels] other connections have a combined number of channels equal to numberOfChannels"
        }
      ],
      "OptionalArgs":[],
      "Returns":[
        {
          "Type":"tensorflow.Tensor",
          "Description":"Output of node."
        }
      ],
      "Throws":[
        "Elinvar.NN.invalidNumberOfInputs",
        "Elinvar.NN.invalidNodeInputShape"
      ],
      "Description":"Produces an output based on input connected values."
    },
    {
      "Name":"connect",
      "MandatoryArgs":[
        {
          "Name":"connections",
          "Type":"List[Node]",
          "Description":""
        }
      ],
      "OptionalArgs":[],
      "Returns":[],
      "Throws":[],
      "Description":"First connection inputs style(means and standard deviations for the outputs), all subsequent connections have style set upon them."
    },
    {
      "Name":"newLayer",
      "MandatoryArgs":[],
      "OptionalArgs":[],
      "Returns":[],
      "Description":"Creates a new layer instead of importing the layer."
    },
    {
      "Name":"build",
      "MandatoryArgs":[],
      "OptionalArgs":[
        {
          "Name":"seed",
          "Type":"Optional[int]",
          "Description":"Seed for random number generator."
        }
      ],
      "Returns":[
        "Elinvar.NN.invalidNumberOfNodeInputs"
      ],
      "Description":"Builds the node."
    },
    {
      "Name":"exportNode",
      "MandatoryArgs":[
        {
          "Name":"path",
          "Type":"str",
          "Description":"Path the network is being saved to."
        },
        {
          "Name":"subdir",
          "Type":"str",
          "Description":"Subdirectory within path where this layer is being saved to."
        }
      ],
      "OptionalArgs":[],
      "Returns":[
        {
          "Type":"str",
          "Description":"The access path used. This is used for overloading."
        }
      ],
      "Throws":[
        "Elinvar.NN.invalidPath(path)"
      ],
      "Description":"Exports ID, and connections. Checks directory existence and validity."
    },
    {
      "Name":"importNode",
      "MandatoryArgs":[
        {
          "Name":"myPath",
          "Type":"str",
          "Description":"Path the network is being saved to. Has to be called myPath to avoid a collision."
        },
        {
          "Name":"subdir",
          "Type":"str",
          "Description":"Subdirectory within path where this layer is being saved to."
        }
      ],
      "OptionalArgs":[],
      "Returns":[
        {
          "Type":"str",
          "Description":"The access path used. This is used for overloading."
        },
        {
          "Type":"List[int]",
          "Description":"A list of node IDs to connect to this node. This is because the connections can only be resolved when all nodes have been imported."
        }
      ],
      "Throws":[
        "Elinvar.NN.missingDirectoryForImport(path)",
        "Elinvar.NN.invalidDataInFile(filePath)",
        "Elinvar.NN.missingFileForImport(filePath)"
      ],
      "Description":"Imports ID and connections."
    }
  ]
}