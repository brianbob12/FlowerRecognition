{
  "Name":"ConvolutionLayer",
  "Superclass":"BuildableNode",
  "Subclasses":[
    "TransposeConvolutionLayer"
  ],
  "Description":"2d convolution layer.",
  "Properties":[
    {
      "Name":"kernelSize",
      "Type":"int",
      "Description":"The side length of the square kernels."
    },
    {
      "Name":"numberOfKernels",
      "Type":"int",
      "Description":"Number of kernels per input channel."
    },
    {
      "Name":"inputChannels",
      "Type":"int",
      "Description":"Number of input channels to the node. This is the 4th element of the shape of the 1st connection."
    },
    {
      "Name":"filter",
      "Type":"tf.Variable",
      "Description":"A filter consisting of multiple convolution kernels. This is a trainable variable"
    },
    {
      "Name":"strideSize",
      "Type":"int",
      "Description":"The x/y stride for the filters."
    },
    {
      "Name":"inputShape",
      "Type":"List[int]",
      "Description":"The functioning input shape of the node. This is created from connections."
    },
    {
      "Name":"padding",
      "Type":"int",
      "Description":"Padding applied to the convolution algorithm."
    },
    {
      "Name":"strides",
      "Type":"List[int]",
      "Description":"The stride vector for the convolution."
    }
  ],
  "Functions":[
      {
      "Name":"__init__",
      "MandatoryArgs":[],
      "OptionalArgs":[
        {
          "Name":"name",
          "Type":"str",
          "Description":"Sets name property."
        },
        {
          "Name":"protected",
          "Type":"bool",
          "Description":"option to block clear function"
        },
        {
          "Name":"ID",
          "Type":"int",
          "Description":"Sets ID property."
        }
      ],
      "Returns":[],
      "Throws":[],
      "Description":"init function sets up key variables."
    },
    {
      "Name":"build",
      "MandatoryArgs":[],
      "OptionalArgs":[
        {
          "Name":"seed",
          "Type":"Optional[int]",
          "Description":"Random seed for filter generation"
        }
      ],
      "Returns":[],
      "Throws":[
        "Elinvar.NN.notEnoughNodeConnections(numberOfConnectionsReceived,requiredConnections)"
      ],
      "Description":"Creates the filter based on inputChannels. Requires at least one connection. If there are multiple connections, connections will be treated as additional channels, therefore all connections must have the same first two elements of shape."
    },
    {
      "Name":"newLayer",
      "MandatoryArgs":[
        {
          "Name":"kernelSize",
          "Type":"int",
          "Description":"Sets kernelSize property."
        },
        {
          "Name":"numberOfKernels",
          "Type":"int",
          "Description":"Sets numberOfKernels property."
        },
        {
          "Name":"stride",
          "Type":"int",
          "Description":"Sets stride property."
        }
      ],
      "OptionalArgs":[],
      "Throws":[],
      "Returns":[],
      "Description":"Creates a new layer instead of importing a layer."
    },
    {
      "Name":"getTrainableVariables",
      "MandatoryArgs":[],
      "OptionalArgs":[],
      "Returns":[
        {
          "Type":"List<tf.Variable>",
          "Description":"[filter(shape=[kernelSize,kernelSize,inputChannels,outputChannels]"
        }
      ],
      "Description":"Returns a list of the trainable tf.Variables in the layer. In this case, returns filter property."
    },
    {
      "name":"exportNode",
      "MandatoryArgs":[
        {
          "Name":"path",
          "Type":"str",
          "Description":"Path the network is being saved to."
        },
        {
          "Name":"subdir",
          "Type":"str",
          "Description":"Subdirectory within path where this layer is being saved to."
        }
      ],
      "OptionalArgs":[],
      "Returns":[
        {
          "Type":"str",
          "Description":"The access path used. This is used for overloading."
        }
      ],
      "Throws":[
        "Elinvar.NN.invalidPath(path)",
        "Elinvar.NN.operationWithUnbuiltNode(operation)"
      ],
      "Description":"Saves this layer to a specified folder. This will  not work if layer is not built."
    },
    {
      "Name":"importNode",
      "MandatoryArgs":[
        {
          "Name":"myPath",
          "Type":"str",
          "Description":"Path the network is being saved to."
        },
        {
          "Name":"subdir",
          "Type":"str",
          "Description":"Subdirectory within path where this layer is being saved to."
        }
      ],
      "OptionalArgs":[],
      "Returns":[
        {
          "Type":"str",
          "Description":"The access path used. This is used for overloading."
        },
        {
          "Type":"List<int>",
          "Description":"A list of node IDs to connect to this node. This is because the connections can only be resolved when all nodes have been imported."
        }
      ],
      "Throws":[
        "Elinvar.NN.invalidPath(path)",
        "Elinvar.NN.missingFileForImport(path,fileName)",
        "Elinvar.NN.missingDirectoryForImport(path)"
      ],
      "Description":"Loads this layer from a specified folder. This does not build the node. The node must have connections set before using this function."
    },
    {
      "Name":"connect",
      "MandatoryArgs":[
        {
          "Name":"connections",
          "Type":"List<Node>",
          "Description":"List of nodes. All nodes after the first will be ignored in execution. Nodes must have shape: [None]"
        }
      ],
      "OptionalArgs":[],
      "Throws":[
        "Elinvar.NN.invalidNodeConnection(receivedShape,requiredShape)"
      ],
      "Returns":[],
      "Description":"Sets specified nodes as inputConnections."
    },
    {
      "Name":"execute",
      "MandatoryArgs":[
        {
          "Name":"inputs",
          "Type":"List<tf.Tensor>",
          "Description":"A tf.Tensor from each input connection. "
        }
      ],
      "OptionalArgs":[],
      "Throws":[],
      "Returns":[
        {
          "Type":"tf.Tensor",
          "Description":"Has shape outputShape"
        }
      ],
      "Description":"Performs 2d convolution on inputs."
    }
  ],
  "Notes":""
}